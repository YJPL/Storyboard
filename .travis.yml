# Travis CI (MIT License) configuration file for SilentComics WordPress theme.
# @link https://travis-ci.org/

# For use with the SilentComics WordPress theme
# @link https://github.com/SilentComics/SilentComics-for-WordPress

# Declare project language and PHP versions to test against.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
php:
    - "7.0"
    # Current $required_php_version for WordPress: 5.6
    - "5.6"
    - "5.5"
    - "5.4"

# Ditch sudo and use containers.
# @link http://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link http://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false

# Declare which versions of WordPress to test against.
# Also declare whether or not to test in Multisite.
env:
    # Trunk (current version in development is 4.8)
    # @link https://github.com/WordPress/WordPress
    - WP_VERSION=master WP_MULTISITE=0

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    - export PHPCS_DIR=/tmp/phpcs
    - export SNIFFS_DIR=/tmp/sniffs
    # Install CodeSniffer for WordPress Coding Standards checks.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
    # Install WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR; fi
    # Install PHP Compatibility sniffs.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git $SNIFFS_DIR/PHPCompatibility; fi
    # Set install path for PHPCS sniffs.
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs --config-set installed_paths $SNIFFS_DIR; fi
    # After CodeSniffer install you should refresh your path.
    - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi
    # Install JSCS: JavaScript Code Style checker.
    # @link http://jscs.info/
    - if [[ "$SNIFF" == "1" ]]; then npm install -g jscs; fi
    # Install JSHint, a JavaScript Code Quality Tool.
    # @link http://jshint.com/docs/
    - if [[ "$SNIFF" == "1" ]]; then npm install -g jshint; fi
    # Pull in the WP Core jshint rules.
    - if [[ "$SNIFF" == "1" ]]; then wget https://develop.svn.wordpress.org/trunk/.jshintrc; fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    - find . \( -name '*.php' \) -exec php -lf {} \;
    # Run the theme through JSHint.
    - if [[ "$SNIFF" == "1" ]]; then jshint .; fi
    # Run the theme through JavaScript Code Style checker.
    - if [[ "$SNIFF" == "1" ]]; then jscs .; fi
    # WordPress Coding Standards.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs -p -s -v -n . --standard=./codesniffer.ruleset.xml --extensions=php; fi

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
